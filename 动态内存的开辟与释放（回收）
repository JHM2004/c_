//练习动态内存开辟：
#include<stdio.h>
#include<stdlib.h>     
//.....................................................................
//// malloc
//int main()
//{	
//	int i = 0;
//	int* ret =(int *) malloc(40);
//	if (ret == NULL)
//	{
//		perror("main");
//		return 0;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		*(ret + i) = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", ret[i]);
//	}
//	free(ret);
//	ret = NULL;
//	return 0;
//}
//................................................................................
//// calloc
////注：malloc不会对内存进行初始化，而calloc会对内存进行初始化,例如：
//int main()
//{	
//	int i = 0;
//	int* ret = (int*)calloc(10, sizeof(int));
//	if (ret == NULL)
//	{
//		perror("main");
//		return 0;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", ret[i]);
//	}
//	free(ret);
//	ret = NULL;
//	return 0;
//}

//................................................................
////realloc
// 
//int main()
//{
//	int i = 0;
//	int* ret = (int*)calloc(10, sizeof(int));
//	if (ret == NULL)
//	{
//		perror("main");
//		return 0;
//	}
//	printf("调整前：（calloc）\n");
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d\n", ret[i]);
//	}
//	printf("\n");
//	//realloc的使用：
//	int *str=realloc(ret, 20 * (sizeof(int)));
//	if (str != NULL)
//	{
//		ret = str;
//	}
//	printf("调整后：(realloc)\n");
//	for (i = 0; i < 20; i++)
//	{
//		printf("%d\n", ret[i]);
//	}
//	free(ret);
//	ret = NULL;
//	return 0;
//}

//注：
//int* p = (int*)realloc(NULL, 40);
//此处realloc的功能类似于malloc，就是在堆区开辟一块40个字节的空间
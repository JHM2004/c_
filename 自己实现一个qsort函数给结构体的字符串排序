//自己实现一个qsort函数给结构体的字符串排序：
#include<stdio.h>

//qsort库函数实现：
void Swap(char* p1, char* p2, int width)//交换位置
{
	int i = 0;
	for (i = 0; i < width; i++)//一个字节一个字节交换
	{
		int ret = *p1;
		*p1 = *p2;
		*p2 = ret;
		p1++;      //往后走一个字节
		p2++;      //往后走一个字节
	}
}

void bubble_qsort(  void* base,                                  //首元素地址
					int sz,                                      //元素个数
					int width,                                   //元素单位长度
					int (*cmp)(const void* p1, const void* p2))  //传入一个函数（回调函数机制）
{   //冒泡趟数：
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{   //冒泡一趟的过程：
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (cmp((char*)base + width * j, (char*)base + width * (j + 1))>0)  //具体使用回调函数（传入两个待比较元素的首字节地址）（for循环一直向后走）
			{
				Swap((char*)base + width * j, (char*)base + width * (j + 1), width);  //传入两个待交换元素的首字节地址+元素的字节长度
			}
		}
	}
}

//使用者写代码：
struct Stu
{
	char name[10];
	int age;
};

int cmp(const char* p1,const char*p2)
{
	return strcmp(((struct Stu*)p1)->name, ((struct Stu*)p2)->name);  //（两个待比较元素的首字节地址均转为结构体指针类型->name找到两个具体比较位置，进行比较
}

int main()
{
	struct Stu s[3] = { {"zhangsan",10},{"lisi",20},{"wangwu",15} };
	bubble_qsort(s, sizeof(s) / sizeof(s[0]), sizeof(s[0]),cmp);
}